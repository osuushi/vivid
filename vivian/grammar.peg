{
// Grammar for the vivian row formatting language
package vivian
}

Root <- exprList:Expr+ EOF {
  return exprList, nil
}

Expr <- Content / Input / Text

Content <- tags:Tag+ OpenBrace children:Expr* CloseBrace {
	return &ContentNode{
    Tags: makeStringSlice(tags),
    Children: children.([]interface{}),
  }, nil
} / Tag+ !OpenBrace {
  return nil, fmt.Errorf("Expected open brace for tag. Did you mean make an input like `@-foo`?")
} / Tag+ OpenBrace .* !CloseBrace {
  return nil, fmt.Errorf("Expected close brace for tag.")
} / TagMarker OpenBrace {
  return nil, fmt.Errorf("Expected a tag name")
}

// Text requires escaping
Text <- chunks:( UnescapedChars / EscapeSequence )+ {
  chunkSlice := makeStringSlice(chunks)
  return &TextNode{
    Text: strings.Join(chunkSlice, ""),
  }, nil
}

Input <- TagMarker "-" components:InputComponent+ SpaceChomper? {
  return &InputNode {
    Path: makeStringSlice(components),
  }, nil
} / TagMarker "-" !InputComponent {
  return nil, fmt.Errorf("Expected an input path")
}

SpaceChomper <- "~" _

InputComponent <- name:Identifier '.'? {
  return name.(string), nil
}

EscapeSequence <- TagMarker escapedChar: EscapedChar {
  return string(escapedChar.([]byte)), nil
}

UnescapedChars <- (!EscapedChar .)+ {
  return string(c.text), nil
}

EscapedChar <- TagMarker / CloseBrace

Tag <- TagMarker tagName:Identifier {
  return tagName.(string), nil
}

Identifier <- [A-Z0-9]i+ {
  return string(c.text), nil
}

// Tags are normalized using ASCII control characters for start of header, start
// of text, and end of text, since it doesn't make sense to use these characters
// in text meant for display.
TagMarker <- '\x01'
OpenBrace <- '\x02'
CloseBrace <- '\x03'

_ "whitespace" ← [ \t\r\n]*
EOF <- !.
